{
  
    
        "post0": {
            "title": "Title",
            "content": "import random rate_data = [] rate_list = [ &quot;Was Pong fun?&quot;, &quot;Was Blackjack fun?&quot;, &quot;Was Snake fun?&quot;, &#39;Was the Jokebox fun?&#39; ] # Initialize True False def initRate(): # setup jokes into a dictionary with id, trfa, true, false item_id = 0 for item in rate_list: rate_data.append({&quot;id&quot;: item_id, &quot;rate&quot;: item, &quot;yes&quot;: 0, &quot;no&quot;: 0}) item_id += 1 # Return all jokes from jokes_data def getRates(): return(rate_data) # Joke getter def getRate(id): return(rate_data[id]) # Return random joke from jokes_data def getRandomRate(): return(random.choice(rate_data)) def getPongRate(): return(rate_data[0]) def getBlackjackRate(): return(rate_data[1]) def getSnakeRate(): return(rate_data[2]) def getJokeboxRate(): return(rate_data[3]) # Liked joke def favoriteRate(): best = 0 bestID = -1 for rate in getRates(): if rate[&#39;yes&#39;] &gt; best: best = rate[&#39;yes&#39;] bestID = rate[&#39;id&#39;] return rate_data[bestID] # Jeered joke def worstRate(): worst = 0 worstID = -1 for rate in getRates(): if rate[&#39;no&#39;] &gt; worst: worst = rate[&#39;no&#39;] worstID = rate[&#39;id&#39;] return rate_data[worstID] # Add to haha for requested id def addRateYes(id): rate_data[id][&#39;yes&#39;] = rate_data[id][&#39;yes&#39;] + 1 return rate_data[id][&#39;yes&#39;] # Add to boohoo for requested id def addRateNo(id): rate_data[id][&#39;no&#39;] = rate_data[id][&#39;no&#39;] + 1 return rate_data[id][&#39;no&#39;] # Pretty Print joke def printRate(rate): print(rate[&#39;id&#39;], rate[&#39;rate&#39;], &quot; n&quot;, &quot;yes:&quot;, rate[&#39;yes&#39;], &quot; n&quot;, &quot;no:&quot;, rate[&#39;no&#39;], &quot; n&quot;) # Number of jokes def countRate(): return len(rate_data) # Test Joke Model if __name__ == &quot;__main__&quot;: initRate() # initialize jokes # Most likes and most jeered best = favoriteRate() print(&quot;Most liked&quot;, best[&#39;yes&#39;]) printRate(best) worst = worstRate() print(&quot;Most disliked&quot;, worst[&#39;no&#39;]) printRate(worst) # Random joke print(&quot;Random Game Rating&quot;) printRate(getRandomRate()) # Count of Jokes print(&quot;Rate Count: &quot; + str(countRate())) printRate(getPongRate()) printRate(getBlackjackRate()) printRate(getSnakeRate()) printRate(getJokeboxRate()) . Most liked 0 3 Was the Jokebox fun? yes: 0 no: 0 Most disliked 0 3 Was the Jokebox fun? yes: 0 no: 0 Random Game Rating 3 Was the Jokebox fun? yes: 0 no: 0 Rate Count: 4 0 Was Pong fun? yes: 0 no: 0 1 Was Blackjack fun? yes: 0 no: 0 2 Was Snake fun? yes: 0 no: 0 3 Was the Jokebox fun? yes: 0 no: 0 .",
            "url": "https://kaiden-dough.github.io/lawnmowers-fastpages/2022/11/01/api.html",
            "relUrl": "/2022/11/01/api.html",
            "date": " • Nov 1, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Edwin",
            "content": ".",
            "url": "https://kaiden-dough.github.io/lawnmowers-fastpages/2022/08/25/edwin.html",
            "relUrl": "/2022/08/25/edwin.html",
            "date": " • Aug 25, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Us",
          "content": "&lt;!DOCTYPE html&gt; . . Theo Huntalas&lt;/h1&gt; Scrum Master . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Kush Sirohi&lt;/h1&gt; Finger . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Mani Taleban&lt;/h1&gt; Frontend . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Kaiden Do&lt;/h1&gt; Backend . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/html&gt; . .",
          "url": "https://kaiden-dough.github.io/lawnmowers-fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Blackjack",
          "content": "&lt;!DOCTYPE html&gt; . . Bet: &lt;--&gt; Score: . + - Dealer: &lt;/h2&gt; You: . Hit Stand . Reset &lt;/body&gt; &lt;/html&gt; .",
          "url": "https://kaiden-dough.github.io/lawnmowers-fastpages/blackjack/",
          "relUrl": "/blackjack/",
          "date": ""
      }
      
  

  

  
      ,"page4": {
          "title": "Jokebox",
          "content": ". Play . .",
          "url": "https://kaiden-dough.github.io/lawnmowers-fastpages/jokebox/",
          "relUrl": "/jokebox/",
          "date": ""
      }
      
  

  
      ,"page5": {
          "title": "Pong",
          "content": "&lt;!doctype html&gt; . . Rate Yes No . &lt;/html&gt;",
          "url": "https://kaiden-dough.github.io/lawnmowers-fastpages/pong/",
          "relUrl": "/pong/",
          "date": ""
      }
      
  

  
      ,"page6": {
          "title": "Rating",
          "content": "Rate Yes No . . // prepare HTML defined &quot;result&quot; container for new output const resultContainer = document.getElementById(&quot;result&quot;); // keys for joke reactions const YES = &quot;yes&quot;; const NO = &quot;no&quot;; // prepare fetch urls const url = &quot;https://lawnmowers.nighthawkcodescrums.gq/&quot;; const best_url = url + &quot;/like/&quot;; // haha reaction const worst_url = url + &quot;/dislike/&quot;; // boohoo reaction // prepare fetch GET options const options = { method: &#39;GET&#39;, // *GET, POST, PUT, DELETE, etc. mode: &#39;cors&#39;, // no-cors, *cors, same-origin cache: &#39;default&#39;, // *default, no-cache, reload, force-cache, only-if-cached credentials: &#39;omit&#39;, // include, *same-origin, omit headers: { &#39;Content-Type&#39;: &#39;application/json&#39; // &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;, }, }; // prepare fetch PUT options, clones with JS Spread Operator (...) const put_options = {...options, method: &#39;PUT&#39;}; // clones and replaces method // fetch the API fetch(url, options) // response is a RESTful &quot;promise&quot; on any successful fetch .then(response =&gt; { // check for response errors if (response.status !== 200) { error(&#39;GET API response failure: &#39; + response.status); return; } // valid response will have JSON data response.json().then(data =&gt; { console.log(data); for (const row of data) { // make &quot;tr element&quot; for each &quot;row of data&quot; const tr = document.createElement(&quot;tr&quot;); // td for joke cell const rate = document.createElement(&quot;td&quot;); rate.innerHTML = row.id + &quot;. &quot; + row.rate; // add fetched data to innerHTML // td for haha cell with onclick actions const yes = document.createElement(&quot;td&quot;); const yes_but = document.createElement(&#39;button&#39;); yes_but.id = YES+row.id // establishes a HAHA JS id for cell yes_but.innerHTML = row.yes; // add fetched &quot;haha count&quot; to innerHTML yes_but.onclick = function () { // onclick function call with &quot;like parameters&quot; reaction(YES, like_url+row.id, yes_but.id); }; yes.appendChild(yes_but); // add &quot;haha button&quot; to haha cell // td for boohoo cell with onclick actions const no = document.createElement(&quot;td&quot;); const no_but = document.createElement(&#39;button&#39;); no_but.id = BOOHOO+row.id // establishes a BOOHOO JS id for cell no_but.innerHTML = row.no; // add fetched &quot;boohoo count&quot; to innerHTML no_but.onclick = function () { // onclick function call with &quot;jeer parameters&quot; reaction(NO, dislike_url+row.id, _but.inod); }; no.appendChild(no_but); // add &quot;boohoo button&quot; to boohoo cell // this builds ALL td&#39;s (cells) into tr (row) element tr.appendChild(rate); tr.appendChild(yes); tr.appendChild(no); // this adds all the tr (row) work above to the HTML &quot;result&quot; container resultContainer.appendChild(tr); } }) }) // catch fetch errors (ie Nginx ACCESS to server blocked) .catch(err =&gt; { error(err + &quot; &quot; + url); }); // Reaction function to likes or jeers user actions function reaction(type, put_url, elemID) { // fetch the API fetch(put_url, put_options) // response is a RESTful &quot;promise&quot; on any successful fetch .then(response =&gt; { // check for response errors if (response.status !== 200) { error(&quot;PUT API response failure: &quot; + response.status) return; // api failure } // valid response will have JSON data response.json().then(data =&gt; { console.log(data); // Likes or Jeers updated/incremented if (type === YES) // like data element document.getElementById(elemID).innerHTML = data.haha; // fetched haha data assigned to haha Document Object Model (DOM) else if (type === NO) // jeer data element document.getElementById(elemID).innerHTML = data.boohoo; // fetched boohoo data assigned to boohoo Document Object Model (DOM) else error(&quot;unknown type: &quot; + type); // should never occur }) }) // catch fetch errors (ie Nginx ACCESS to server blocked) .catch(err =&gt; { error(err + &quot; &quot; + put_url); }); } // Something went wrong with actions or responses function error(err) { // log as Error in console console.error(err); // append error to resultContainer const tr = document.createElement(&quot;tr&quot;); const td = document.createElement(&quot;td&quot;); td.innerHTML = err; tr.appendChild(td); resultContainer.appendChild(tr); } . &lt;/script&gt; .",
          "url": "https://kaiden-dough.github.io/lawnmowers-fastpages/rating/",
          "relUrl": "/rating/",
          "date": ""
      }
      
  

  
  

  
  

  
  

  
  

  
  

  
      ,"page12": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://kaiden-dough.github.io/lawnmowers-fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}